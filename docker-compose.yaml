services:
  postgres:
    restart: always
    build: './dockerfiles/postgres'
    image: postgres_system
    container_name: postgres
    profiles:
      - mlflow
      - all
    ports:
      - "${PG_PORT:-5432}:5432"
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER:-airflow}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-airflow}
      - POSTGRES_DATABASE=${PG_DATABASE:-airflow}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "5432", "-U", "${PG_USER:-airflow}"]
      interval: 60s
      timeout: 20s
      retries: 3

  s3:
    restart: always
    image: minio/minio:latest
    container_name: minio
    profiles:
      - mlflow
      - all
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_PORT_UI:-9001}:9001"
    networks:
      - frontend
      - backend
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minio}
      - MINIO_SECRET_KEY=${MINIO_SECRET_ACCESS_KEY:-minio123}
    volumes:
      - minio_data:/data
    command: server /data --console-address :9001
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 60s
      timeout: 20s
      retries: 3

  create_s3_buckets:
    image: minio/mc:latest
    container_name: minio_create_bucket
    profiles:
      - mlflow
      - all
    depends_on:
      - s3
    networks:
      - backend
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:9000 ${MINIO_ACCESS_KEY:-minio} ${MINIO_SECRET_ACCESS_KEY:-minio123} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME:-mlflow};
      /usr/bin/mc policy download s3/${MLFLOW_BUCKET_NAME:-mlflow};
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${DATA_REPO_BUCKET_NAME:-data};
      /usr/bin/mc policy download s3/${DATA_REPO_BUCKET_NAME:-data};
      exit 0;
      '

  mlflow:
    restart: always
    build: "./dockerfiles/mlflow"
    image: mlflow
    container_name: mlflow
    profiles:
      - mlflow
      - all
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    networks:
      - frontend
      - backend
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minio}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY:-minio123}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
    command: >
      mlflow server 
      --backend-store-uri postgresql://${PG_USER:-airflow}:${PG_PASSWORD:-airflow}@postgres:5432/mlflow_db
      --host 0.0.0.0
      --default-artifact-root s3://${MLFLOW_BUCKET_NAME:-mlflow}/
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://mlflow:5000 || exit 1
      interval: 60s
      timeout: 10s
      retries: 3

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  db_data:
  minio_data:
